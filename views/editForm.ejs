<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('partials/_head.ejs') %>
    <title>Edit Feedback Form</title>
    <script src="/js/editForm.js"></script> <!-- Include the JavaScript file for handling dynamic question addition and removal -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.6/Sortable.min.js"></script>
    <script src="/js/historyManager.js"></script>
    <script src="/js/idGenerator.js"></script>
</head>
<body>
    <%- include('partials/_header.ejs') %>
    <div class="container mt-5">
        <h1>Edit Feedback Form</h1>
        <form action="/update-form/<%= form._id %>" method="POST" id="editForm">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <div class="mb-3">
                <label for="title" class="form-label">Form Title</label>
                <input type="text" class="form-control" id="title" name="title" value="<%= form.title %>" required>
            </div>
            <style>
                .block {
                    border: 1px solid #ccc;
                    padding: 10px;
                    margin-bottom: 10px;
                    background-color: #f9f9f9;
                }
                .drag-handle {
                    cursor: move;
                    display: inline-block;
                    width: 20px;
                    height: 20px;
                    background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2 11h16v2H2zM2 7h16v2H2zM2 3h16v2H2zM2 15h16v2H2z"/></svg>');
                    background-repeat: no-repeat;
                    background-position: center;
                }
                .sortable-placeholder {
                    border: 2px dashed #ccc;
                    background-color: #f0f0f0;
                    height: 50px;
                }
            </style>
            <div id="questionsContainer">
            </div>
            <div id="inspector" style="display: none; border: 1px solid #ccc; padding: 10px; margin-top: 10px;">
                <h4>Inspector</h4>
                <div id="inspector-content"></div>
            </div>
            <button type="button" class="btn btn-secondary mb-3" onclick="addShortTextQuestionBlock()">Add Short Text</button>
            <button type="button" class="btn btn-secondary mb-3" onclick="addSingleChoiceQuestionBlock()">Add Single Choice</button>
            <button type="button" class="btn btn-secondary mb-3" onclick="addMultipleChoiceQuestionBlock()">Add Multiple Choice</button>
            <button type="button" id="addTextBlockBtn" class="btn btn-secondary mb-3" onclick="addTextBlock()">Add Text Block</button>
            <button type="button" id="addDividerBtn" class="btn btn-secondary mb-3" onclick="addDividerBlock()">Add Divider</button>
            <button type="submit" class="btn btn-primary" style="background-color: #007bff;">Update Form</button>
        </form>
    </div>
    <%- include('partials/_footer.ejs') %>
    <script>
        const questionsContainer = document.getElementById('questionsContainer');
        const inspector = document.getElementById('inspector');
        const inspectorContent = document.getElementById('inspector-content');
        let selectedBlock = null;
        const history = new HistoryManager();

        history.addState(questionsContainer.innerHTML);
        new Sortable(questionsContainer, {
            animation: 150,
            handle: '.drag-handle',
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
            dragClass: 'sortable-drag',
            fallbackOnBody: true,
            swapThreshold: 0.65,
            forceFallback: true,
            placeholderClass: 'sortable-placeholder',
            onEnd: () => {
                history.addState(questionsContainer.innerHTML);
            }
        });

        questionsContainer.addEventListener('click', (e) => {
            const block = e.target.closest('.block');
            if (block) {
                if (selectedBlock) {
                    selectedBlock.classList.remove('selected');
                }
                block.classList.add('selected');
                selectedBlock = block;
                inspector.style.display = 'block';
                renderInspector();
            }
        });

        function updateBlockWarnings(block) {
            const warningsContainer = block.querySelector('.warnings-container') || document.createElement('div');
            warningsContainer.className = 'warnings-container';
            warningsContainer.innerHTML = '';

            const label = block.querySelector('.form-label')?.textContent;
            if (!label) {
                warningsContainer.innerHTML += '<span class="badge bg-danger ms-2">Missing Title</span>';
            }

            if (block.dataset.type === 'single-choice' || block.dataset.type === 'multiple-choice') {
                const optionsContainer = block.querySelector('.options-container');
                if (optionsContainer.children.length === 0) {
                    warningsContainer.innerHTML += '<span class="badge bg-danger ms-2">Empty Options</span>';
                }
            }

            if (warningsContainer.innerHTML) {
                block.appendChild(warningsContainer);
            } else if (warningsContainer.parentElement) {
                warningsContainer.remove();
            }
        }

        function renderInspector() {
            if (!selectedBlock) return;
            inspectorContent.innerHTML = '';
            const blockType = selectedBlock.dataset.type;

            if (blockType === 'text') {
                const textarea = selectedBlock.querySelector('textarea');
                inspectorContent.innerHTML = `
                    <div class="mb-3">
                        <label for="inspector-text" class="form-label">Text</label>
                        <textarea id="inspector-text" class="form-control" rows="3">${textarea.value}</textarea>
                    </div>
                `;
                const inspectorTextarea = document.getElementById('inspector-text');
                inspectorTextarea.addEventListener('input', (e) => {
                    textarea.value = e.target.value;
                });
            } else if (blockType === 'divider') {
                inspectorContent.innerHTML = 'No properties to edit for this block.';
            } else if (blockType === 'short-text' || blockType === 'single-choice' || blockType === 'multiple-choice') {
                const label = selectedBlock.querySelector('.form-label').textContent;
                const helpText = selectedBlock.querySelector('.form-text').textContent;
                const isRequired = selectedBlock.querySelector('input[name="blocks[][required]"]')?.checked || false;

                inspectorContent.innerHTML = `
                    <div class="mb-3">
                        <label for="inspector-label" class="form-label">Label</label>
                        <input type="text" id="inspector-label" class="form-control" value="${label}">
                    </div>
                    <div class="mb-3">
                        <label for="inspector-help-text" class="form-label">Help Text</label>
                        <input type="text" id="inspector-help-text" class="form-control" value="${helpText}">
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="inspector-required" ${isRequired ? 'checked' : ''}>
                        <label class="form-check-label" for="inspector-required">Required</label>
                    </div>
                `;

                document.getElementById('inspector-label').addEventListener('input', (e) => {
                    selectedBlock.querySelector('.form-label').textContent = e.target.value;
                    selectedBlock.querySelector('input[name="blocks[][label]"]').value = e.target.value;
                    updateBlockWarnings(selectedBlock);
                });
                document.getElementById('inspector-help-text').addEventListener('input', (e) => {
                    selectedBlock.querySelector('.form-text').textContent = e.target.value;
                    selectedBlock.querySelector('input[name="blocks[][helpText]"]').value = e.target.value;
                });
                document.getElementById('inspector-required').addEventListener('change', (e) => {
                    let requiredInput = selectedBlock.querySelector('input[name="blocks[][required]"]');
                    if (!requiredInput) {
                        requiredInput = document.createElement('input');
                        requiredInput.type = 'hidden';
                        requiredInput.name = 'blocks[][required]';
                        selectedBlock.appendChild(requiredInput);
                    }
                    requiredInput.value = e.target.checked;
                });

                if (blockType === 'single-choice' || blockType === 'multiple-choice') {
                    const optionsContainer = selectedBlock.querySelector('.options-container');
                    const optionsHTML = Array.from(optionsContainer.children).map((option, index) => `
                        <div class="d-flex mb-2">
                            <input type="text" class="form-control" value="${option.querySelector('label').textContent.trim()}" oninput="updateOption(this, ${index})">
                            <button type="button" class="btn btn-danger ms-2" onclick="removeOption(this, ${index})">Remove</button>
                        </div>
                    `).join('');

                    inspectorContent.innerHTML += `
                        <hr>
                        <h5>Options</h5>
                        <div id="inspector-options">
                            ${optionsHTML}
                        </div>
                        <button type="button" class="btn btn-secondary mt-2" onclick="addOption()">Add Option</button>
                    `;
                }
            }
        }

        function updateOption(input, index) {
            const optionsContainer = selectedBlock.querySelector('.options-container');
            const optionLabel = optionsContainer.children[index].querySelector('label');
            optionLabel.textContent = input.value;
            const hiddenInput = optionsContainer.children[index].querySelector('input[type="hidden"]');
            hiddenInput.value = input.value;
        }

        function removeOption(button, index) {
            const optionsContainer = selectedBlock.querySelector('.options-container');
            optionsContainer.children[index].remove();
            renderInspector();
            updateBlockWarnings(selectedBlock);
        }

        function addOption() {
            const optionsContainer = selectedBlock.querySelector('.options-container');
            const blockId = selectedBlock.dataset.id;
            const optionIndex = optionsContainer.children.length;
            const optionType = selectedBlock.dataset.type === 'single-choice' ? 'radio' : 'checkbox';
            const newOptionHTML = `
                <div class="form-check">
                    <input type="hidden" name="blocks[][options][${optionIndex}][text]" value="New Option">
                    <input class="form-check-input" type="${optionType}" name="${optionType}-${blockId}" id="${optionType}-${blockId}-${optionIndex + 1}">
                    <label class="form-check-label" for="${optionType}-${blockId}-${optionIndex + 1}">
                        New Option
                    </label>
                </div>
            `;
            optionsContainer.insertAdjacentHTML('beforeend', newOptionHTML);
            renderInspector();
            updateBlockWarnings(selectedBlock);
        }

        function addBlock(html) {
            history.addState(questionsContainer.innerHTML);
            questionsContainer.insertAdjacentHTML('beforeend', html);
            const newBlock = questionsContainer.lastElementChild;
            updateBlockWarnings(newBlock);
        }

        function addShortTextQuestionBlock() {
            const existingIds = Array.from(document.querySelectorAll('.block')).map(b => b.dataset.id);
            const id = generateUniqueId('short-text-question', existingIds);
            const html = `
                <div class="mb-3 question short-text-question block" data-id="${id}" data-type="short-text">
                    <input type="hidden" name="blocks[][id]" value="${id}">
                    <input type="hidden" name="blocks[][type]" value="short-text">
                    <input type="hidden" name="blocks[][label]" value="Short Text Question">
                    <input type="hidden" name="blocks[][helpText]" value="Help text goes here.">
                    <span class="drag-handle"></span>
                    <label class="form-label">Short Text Question</label>
                    <input type="text" class="form-control" placeholder="Short answer text">
                    <small class="form-text text-muted">Help text goes here.</small>
                    <button type="button" class="btn btn-danger removeQuestionBtn" onclick="removeBlock(this)">Remove</button>
                </div>
            `;
            addBlock(html);
        }

        function addSingleChoiceQuestionBlock() {
            const existingIds = Array.from(document.querySelectorAll('.block')).map(b => b.dataset.id);
            const id = generateUniqueId('single-choice-question', existingIds);
            const html = `
                <div class="mb-3 question single-choice-question block" data-id="${id}" data-type="single-choice">
                    <input type="hidden" name="blocks[][id]" value="${id}">
                    <input type="hidden" name="blocks[][type]" value="single-choice">
                    <input type="hidden" name="blocks[][label]" value="Single Choice Question">
                    <input type="hidden" name="blocks[][helpText]" value="Help text goes here.">
                    <span class="drag-handle"></span>
                    <label class="form-label">Single Choice Question</label>
                    <div class="options-container">
                        <div class="form-check">
                            <input type="hidden" name="blocks[][options][0][text]" value="Option 1">
                            <input class="form-check-input" type="radio" name="radio-${id}" id="radio-${id}-1">
                            <label class="form-check-label" for="radio-${id}-1">
                                Option 1
                            </label>
                        </div>
                    </div>
                    <small class="form-text text-muted">Help text goes here.</small>
                    <button type="button" class="btn btn-danger removeQuestionBtn" onclick="removeBlock(this)">Remove</button>
                </div>
            `;
            addBlock(html);
        }

        function addMultipleChoiceQuestionBlock() {
            const existingIds = Array.from(document.querySelectorAll('.block')).map(b => b.dataset.id);
            const id = generateUniqueId('multiple-choice-question', existingIds);
            const html = `
                <div class="mb-3 question multiple-choice-question block" data-id="${id}" data-type="multiple-choice">
                    <input type="hidden" name="blocks[][id]" value="${id}">
                    <input type="hidden" name="blocks[][type]" value="multiple-choice">
                    <input type="hidden" name="blocks[][label]" value="Multiple Choice Question">
                    <input type="hidden" name="blocks[][helpText]" value="Help text goes here.">
                    <span class="drag-handle"></span>
                    <label class="form-label">Multiple Choice Question</label>
                    <div class="options-container">
                        <div class="form-check">
                            <input type="hidden" name="blocks[][options][0][text]" value="Option 1">
                            <input class="form-check-input" type="checkbox" id="checkbox-${id}-1">
                            <label class="form-check-label" for="checkbox-${id}-1">
                                Option 1
                            </label>
                        </div>
                    </div>
                    <small class="form-text text-muted">Help text goes here.</small>
                    <button type="button" class="btn btn-danger removeQuestionBtn" onclick="removeBlock(this)">Remove</button>
                </div>
            `;
            addBlock(html);
        }

        function addTextBlock() {
            const existingIds = Array.from(document.querySelectorAll('.block')).map(b => b.dataset.id);
            const id = generateUniqueId('text-block', existingIds);
            const newTextBlockHTML = `
                <div class="mb-3 text-block block" data-id="${id}">
                    <input type="hidden" name="blocks[][id]" value="${id}">
                    <input type="hidden" name="blocks[][type]" value="text">
                    <span class="drag-handle"></span>
                    <textarea class="form-control" name="blocks[][content]" rows="3" placeholder="Enter your text here..."></textarea>
                    <button type="button" class="btn btn-danger removeQuestionBtn" onclick="removeBlock(this)">Remove</button>
                </div>
            `;
            addBlock(newTextBlockHTML);
        }

        function addDividerBlock() {
            const existingIds = Array.from(document.querySelectorAll('.block')).map(b => b.dataset.id);
            const id = generateUniqueId('divider-block', existingIds);
            const newDividerBlockHTML = `
                <div class="mb-3 divider-block block" data-id="${id}">
                    <input type="hidden" name="blocks[][id]" value="${id}">
                    <input type="hidden" name="blocks[][type]" value="divider">
                    <span class="drag-handle"></span>
                    <hr>
                    <button type="button" class="btn btn-danger removeQuestionBtn" onclick="removeBlock(this)">Remove</button>
                </div>
            `;
            addBlock(newDividerBlockHTML);
        }

        function removeBlock(button) {
            history.addState(questionsContainer.innerHTML);
            const blockToRemove = button.parentElement;
            if (blockToRemove === selectedBlock) {
                inspector.style.display = 'none';
                selectedBlock = null;
            }
            blockToRemove.remove();
        }

        inspector.addEventListener('focusin', (e) => {
            if (e.target.matches('input, textarea')) {
                history.addState(questionsContainer.innerHTML);
            }
        });

        function undo() {
            const previousState = history.undo();
            if (previousState) {
                questionsContainer.innerHTML = previousState;
            }
        }

        function redo() {
            const nextState = history.redo();
            if (nextState) {
                questionsContainer.innerHTML = nextState;
            }
        }

        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                if (e.key === 'z') {
                    e.preventDefault();
                    undo();
                } else if (e.key === 'y') {
                    e.preventDefault();
                    redo();
                }
            }
        });
    </script>
</body>
</html>