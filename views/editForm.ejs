<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('partials/_head.ejs') %>
    <title>Edit Feedback Form</title>
    <script src="/js/editForm.js"></script> <!-- Include the JavaScript file for handling dynamic question addition and removal -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.6/Sortable.min.js"></script>
    <script src="/js/historyManager.js"></script>
    <script src="/js/idGenerator.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tributejs/5.1.3/tribute.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tributejs/5.1.3/tribute.min.js"></script>
</head>
<body>
    <%- include('partials/_header.ejs') %>
    <div class="container mt-5">
        <h1>Edit Feedback Form</h1>
        <form action="/update-form/<%= form._id %>" method="POST" id="editForm">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <div class="mb-3">
                <label for="title" class="form-label">Form Title</label>
                <input type="text" class="form-control" id="title" name="title" value="<%= form.title %>" required>
            </div>
            <style>
                .block {
                    border: 1px solid #ccc;
                    padding: 10px;
                    margin-bottom: 10px;
                    background-color: #f9f9f9;
                }
                .drag-handle {
                    cursor: move;
                    display: inline-block;
                    width: 20px;
                    height: 20px;
                    background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M2 11h16v2H2zM2 7h16v2H2zM2 3h16v2H2zM2 15h16v2H2z"/></svg>');
                    background-repeat: no-repeat;
                    background-position: center;
                }
                .sortable-placeholder {
                    border: 2px dashed #ccc;
                    background-color: #f0f0f0;
                    height: 50px;
                }
            </style>
            <div id="questionsContainer">
            </div>
            <div id="inspector" style="display: none; border: 1px solid #ccc; padding: 10px; margin-top: 10px;">
                <h4>Inspector</h4>
                <ul class="nav nav-tabs" id="inspectorTab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="general-tab" data-bs-toggle="tab" data-bs-target="#general" type="button" role="tab" aria-controls="general" aria-selected="true">General</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="logic-tab" data-bs-toggle="tab" data-bs-target="#logic" type="button" role="tab" aria-controls="logic" aria-selected="false">Logic</button>
                    </li>
                </ul>
                <div class="tab-content" id="inspectorTabContent">
                    <div class="tab-pane fade show active" id="general" role="tabpanel" aria-labelledby="general-tab">
                        <div id="general-tab-content"></div>
                    </div>
                    <div class="tab-pane fade" id="logic" role="tabpanel" aria-labelledby="logic-tab">
                        <div id="logic-tab-content"></div>
                    </div>
                </div>
            </div>
            <button type="button" class="btn btn-secondary mb-3" onclick="addShortTextQuestionBlock()">Add Short Text</button>
            <button type="button" class="btn btn-secondary mb-3" onclick="addSingleChoiceQuestionBlock()">Add Single Choice</button>
            <button type="button" class="btn btn-secondary mb-3" onclick="addMultipleChoiceQuestionBlock()">Add Multiple Choice</button>
            <button type="button" id="addTextBlockBtn" class="btn btn-secondary mb-3" onclick="addTextBlock()">Add Text Block</button>
            <button type="button" id="addDividerBtn" class="btn btn-secondary mb-3" onclick="addDividerBlock()">Add Divider</button>
            <button type="button" id="validateBtn" class="btn btn-info mb-3">Validate</button>
            <button type="button" id="publishBtn" class="btn btn-success mb-3">Publish</button>
            <button type="submit" class="btn btn-primary" style="background-color: #007bff;">Update Form</button>
        </form>
        <div id="errorContainer" class="alert alert-danger mt-3" style="display: none;">
            <h5>Validation Errors:</h5>
            <ul id="errorList"></ul>
        </div>
    </div>
    <%- include('partials/_footer.ejs') %>
    <%- include('partials/_ruleTemplate.ejs') %>

    <!-- Publish Modal -->
    <div class="modal fade" id="publishModal" tabindex="-1" aria-labelledby="publishModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="publishModalLabel">Publish Survey</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>This is the JSON snapshot of your survey. You can download it for your records.</p>
                    <pre id="jsonSnapshot" style="background-color: #f8f9fa; border: 1px solid #dee2e6; padding: 1rem; border-radius: 0.25rem;"></pre>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" id="downloadJsonBtn" class="btn btn-primary">Download JSON</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const questionsContainer = document.getElementById('questionsContainer');
        const inspector = document.getElementById('inspector');
        const generalTabContent = document.getElementById('general-tab-content');
        const logicTabContent = document.getElementById('logic-tab-content');
        let selectedBlock = null;
        const history = new HistoryManager();

        history.addState(questionsContainer.innerHTML);
        new Sortable(questionsContainer, {
            animation: 150,
            handle: '.drag-handle',
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
            dragClass: 'sortable-drag',
            fallbackOnBody: true,
            swapThreshold: 0.65,
            forceFallback: true,
            placeholderClass: 'sortable-placeholder',
            onEnd: () => {
                history.addState(questionsContainer.innerHTML);
            }
        });

        questionsContainer.addEventListener('click', (e) => {
            const block = e.target.closest('.block');
            if (block) {
                if (selectedBlock) {
                    selectedBlock.classList.remove('selected');
                }
                block.classList.add('selected');
                selectedBlock = block;
                inspector.style.display = 'block';
                renderInspector();
            }
        });

        function updateBlockWarnings(block) {
            const warningsContainer = block.querySelector('.warnings-container') || document.createElement('div');
            warningsContainer.className = 'warnings-container';
            warningsContainer.innerHTML = '';

            const label = block.querySelector('.form-label')?.textContent;
            if (!label) {
                warningsContainer.innerHTML += '<span class="badge bg-danger ms-2">Missing Title</span>';
            }

            if (block.dataset.type === 'single-choice' || block.dataset.type === 'multiple-choice') {
                const optionsContainer = block.querySelector('.options-container');
                if (optionsContainer.children.length === 0) {
                    warningsContainer.innerHTML += '<span class="badge bg-danger ms-2">Empty Options</span>';
                }
            }

            if (warningsContainer.innerHTML) {
                block.appendChild(warningsContainer);
            } else if (warningsContainer.parentElement) {
                warningsContainer.remove();
            }
        }

        function renderInspector() {
            if (!selectedBlock) return;
            generalTabContent.innerHTML = '';
            logicTabContent.innerHTML = '';
            const blockType = selectedBlock.dataset.type;

            if (blockType === 'text-block') {
                const textarea = selectedBlock.querySelector('textarea');
                generalTabContent.innerHTML = `
                    <div class="mb-3">
                        <label for="inspector-text" class="form-label">Text</label>
                        <textarea id="inspector-text" class="form-control" rows="3">${textarea.value}</textarea>
                    </div>
                `;
                const inspectorTextarea = document.getElementById('inspector-text');
                inspectorTextarea.addEventListener('input', (e) => {
                    textarea.value = e.target.value;
                });
            } else if (blockType === 'divider') {
                inspectorContent.innerHTML = 'No properties to edit for this block.';
            } else if (blockType === 'text' || blockType === 'multipleChoice' || blockType === 'checkbox' || blockType === 'rating') {
                const label = selectedBlock.querySelector('.form-label').textContent;
                const helpText = selectedBlock.querySelector('.form-text').textContent;
                const isRequired = selectedBlock.querySelector('input[name="blocks[][required]"]')?.checked || false;

                inspectorContent.innerHTML = `
                    <div class="mb-3">
                        <label for="inspector-label" class="form-label">Label</label>
                        <input type="text" id="inspector-label" class="form-control" value="${label}">
                    </div>
                    <div class="mb-3">
                        <label for="inspector-help-text" class="form-label">Help Text</label>
                        <input type="text" id="inspector-help-text" class="form-control" value="${helpText}">
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="inspector-required" ${isRequired ? 'checked' : ''}>
                        <label class="form-check-label" for="inspector-required">Required</label>
                    </div>
                `;

                const tribute = new Tribute({
                    trigger: '{{',
                    values: function(text, cb) {
                        const previousQuestions = getPreviousQuestions();
                        cb(previousQuestions);
                    },
                    selectTemplate: function(item) {
                        return `{{answers.${item.original.key}}}`;
                    },
                    menuItemTemplate: function(item) {
                        return `${item.original.key} - ${item.original.value}`;
                    }
                });
                tribute.attach(document.getElementById('inspector-label'));
                tribute.attach(document.getElementById('inspector-help-text'));

                document.getElementById('inspector-label').addEventListener('input', (e) => {
                    selectedBlock.querySelector('.form-label').textContent = e.target.value;
                    selectedBlock.querySelector('input[name="blocks[][label]"]').value = e.target.value;
                    updateBlockWarnings(selectedBlock);
                });
                document.getElementById('inspector-help-text').addEventListener('input', (e) => {
                    selectedBlock.querySelector('.form-text').textContent = e.target.value;
                    selectedBlock.querySelector('input[name="blocks[][helpText]"]').value = e.target.value;
                });
                document.getElementById('inspector-required').addEventListener('change', (e) => {
                    let requiredInput = selectedBlock.querySelector('input[name="blocks[][required]"]');
                    if (!requiredInput) {
                        requiredInput = document.createElement('input');
                        requiredInput.type = 'hidden';
                        requiredInput.name = 'blocks[][required]';
                        selectedBlock.appendChild(requiredInput);
                    }
                    requiredInput.value = e.target.checked;
                });

                if (blockType === 'single-choice' || blockType === 'multiple-choice') {
                    const optionsContainer = selectedBlock.querySelector('.options-container');
                    const isShuffle = selectedBlock.querySelector('input[name="blocks[][shuffle]"]')?.value === 'true' || false;
                    const optionsHTML = Array.from(optionsContainer.children).map((option, index) => {
                        const optionText = option.querySelector('label').textContent.trim();
                        const isPinned = option.querySelector('input[type="hidden"]')?.dataset.pinned === 'true' || false;
                        return `
                            <div class="d-flex mb-2">
                                <button type="button" class="btn btn-light me-2" onclick="togglePin(this, ${index})">${isPinned ? '📌' : '📍'}</button>
                                <input type="text" class="form-control" value="${optionText}" oninput="updateOption(this, ${index})">
                                <button type="button" class="btn btn-danger ms-2" onclick="removeOption(this, ${index})">Remove</button>
                            </div>
                        `;
                    }).join('');

                    generalTabContent.innerHTML += `
                        <hr>
                        <h5>Options</h5>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="inspector-shuffle" ${isShuffle ? 'checked' : ''}>
                            <label class="form-check-label" for="inspector-shuffle">Shuffle choices</label>
                        </div>
                        <div id="inspector-options">
                            ${optionsHTML}
                        </div>
                        <button type="button" class="btn btn-secondary mt-2" onclick="addOption()">Add Option</button>
                    `;

                    document.getElementById('inspector-shuffle').addEventListener('change', (e) => {
                        let shuffleInput = selectedBlock.querySelector('input[name="blocks[][shuffle]"]');
                        if (!shuffleInput) {
                            shuffleInput = document.createElement('input');
                            shuffleInput.type = 'hidden';
                            shuffleInput.name = 'blocks[][shuffle]';
                            selectedBlock.appendChild(shuffleInput);
                        }
                        shuffleInput.value = e.target.checked;
                    });
                }

                // Render Logic Tab
                const logicTabContent = document.getElementById('logic-tab-content');
                logicTabContent.innerHTML = `
                    <div class="mb-3">
                        <label for="logic-condition" class="form-label">Show this question if</label>
                        <select id="logic-condition" class="form-select">
                            <option value="AND">All</option>
                            <option value="OR">Any</option>
                        </select>
                        <span>of the following match:</span>
                    </div>
                    <div id="rule-list"></div>
                    <button type="button" id="add-rule-btn" class="btn btn-secondary mt-2">Add Rule</button>
                `;

                document.getElementById('add-rule-btn').addEventListener('click', addRule);
                logicTabContent.addEventListener('click', (e) => {
                    if (e.target.classList.contains('remove-rule-btn')) {
                        removeRule(e.target.parentElement);
                    }
                });
                logicTabContent.addEventListener('change', updateDisplayLogic);

                // Data binding
                const hiddenInput = selectedBlock.querySelector('input[name="blocks[][displayLogic]"]');
                if (hiddenInput && hiddenInput.value) {
                    const displayLogic = JSON.parse(hiddenInput.value);
                    document.getElementById('logic-condition').value = displayLogic.condition;
                    const ruleList = document.getElementById('rule-list');
                    displayLogic.rules.forEach(ruleData => {
                        const ruleTemplate = document.getElementById('rule-template');
                        const newRule = ruleTemplate.content.cloneNode(true);
                        populatePreviousQuestions(newRule.querySelector('[name="rule-question"]'));
                        newRule.querySelector('[name="rule-question"]').value = ruleData.questionId;
                        newRule.querySelector('[name="rule-operator"]').value = ruleData.operator;
                        newRule.querySelector('[name="rule-value"]').value = ruleData.value;
                        ruleList.appendChild(newRule);
                    });
                }
            }
        }

        function togglePin(button, index) {
            const optionsContainer = selectedBlock.querySelector('.options-container');
            const optionEl = optionsContainer.children[index];
            const hiddenInput = optionEl.querySelector('input[name$="[pinned]"]');
            const isPinned = hiddenInput.value === 'true';
            hiddenInput.value = !isPinned;
            hiddenInput.dataset.pinned = !isPinned;
            button.textContent = !isPinned ? '📌' : '📍';
        }

        function updateOption(input, index) {
            const optionsContainer = selectedBlock.querySelector('.options-container');
            const optionLabel = optionsContainer.children[index].querySelector('label');
            optionLabel.textContent = input.value;
            const hiddenInput = optionsContainer.children[index].querySelector('input[type="hidden"]');
            hiddenInput.value = input.value;
        }

        function removeOption(button, index) {
            const optionsContainer = selectedBlock.querySelector('.options-container');
            optionsContainer.children[index].remove();
            renderInspector();
            updateBlockWarnings(selectedBlock);
        }

        function addOption() {
            const optionsContainer = selectedBlock.querySelector('.options-container');
            const blockId = selectedBlock.dataset.id;
            const optionIndex = optionsContainer.children.length;
            const optionType = selectedBlock.dataset.type === 'single-choice' ? 'radio' : 'checkbox';
            const newOptionHTML = `
                <div class="form-check">
                    <input type="hidden" name="blocks[][options][${optionIndex}][text]" value="New Option">
                    <input class="form-check-input" type="${optionType}" name="${optionType}-${blockId}" id="${optionType}-${blockId}-${optionIndex + 1}">
                    <label class="form-check-label" for="${optionType}-${blockId}-${optionIndex + 1}">
                        New Option
                    </label>
                </div>
            `;
            optionsContainer.insertAdjacentHTML('beforeend', newOptionHTML);
            renderInspector();
            updateBlockWarnings(selectedBlock);
        }

        function addRule() {
            const ruleTemplate = document.getElementById('rule-template');
            const newRule = ruleTemplate.content.cloneNode(true);
            const ruleList = document.getElementById('rule-list');
            populatePreviousQuestions(newRule.querySelector('[name="rule-question"]'));
            ruleList.appendChild(newRule);
            updateDisplayLogic();
        }

        function removeRule(ruleElement) {
            ruleElement.remove();
            updateDisplayLogic();
        }

        function populatePreviousQuestions(selectElement) {
            selectElement.innerHTML = '<option value="">Select a question...</option>';
            const blocks = Array.from(questionsContainer.children);
            const selectedIndex = blocks.indexOf(selectedBlock);
            for (let i = 0; i < selectedIndex; i++) {
                const block = blocks[i];
                const label = block.querySelector('.form-label')?.textContent.trim();
                if (label) {
                    const option = document.createElement('option');
                    option.value = block.dataset.id;
                    option.textContent = label;
                    selectElement.appendChild(option);
                }
            }
        }

        function updateDisplayLogic() {
            const logicCondition = document.getElementById('logic-condition').value;
            const ruleElements = document.querySelectorAll('#rule-list .rule');
            const rules = Array.from(ruleElements).map(ruleEl => ({
                questionId: ruleEl.querySelector('[name="rule-question"]').value,
                operator: ruleEl.querySelector('[name="rule-operator"]').value,
                value: ruleEl.querySelector('[name="rule-value"]').value,
            }));

            const displayLogic = {
                condition: logicCondition,
                rules: rules,
            };

            let hiddenInput = selectedBlock.querySelector('input[name="blocks[][displayLogic]"]');
            if (!hiddenInput) {
                hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'blocks[][displayLogic]';
                selectedBlock.appendChild(hiddenInput);
            }
            hiddenInput.value = JSON.stringify(displayLogic);
        }

        function getPreviousQuestions() {
            const blocks = Array.from(questionsContainer.children);
            const selectedIndex = blocks.indexOf(selectedBlock);
            const previousQuestions = [];
            for (let i = 0; i < selectedIndex; i++) {
                const block = blocks[i];
                if (block.classList.contains('question')) {
                    const id = block.dataset.id;
                    const label = block.querySelector('.form-label')?.textContent.trim();
                    if (id && label) {
                        previousQuestions.push({ key: id, value: label });
                    }
                }
            }
            return previousQuestions;
        }

        function addBlock(html) {
            history.addState(questionsContainer.innerHTML);
            questionsContainer.insertAdjacentHTML('beforeend', html);
            const newBlock = questionsContainer.lastElementChild;
            updateBlockWarnings(newBlock);
        }

        function addShortTextQuestionBlock() {
            const existingIds = Array.from(document.querySelectorAll('.block')).map(b => b.dataset.id);
            const id = generateUniqueId('short-text-question', existingIds);
            const html = `
                <div class="mb-3 question short-text-question block" data-id="${id}" data-type="text">
                    <input type="hidden" name="blocks[][id]" value="${id}">
                    <input type="hidden" name="blocks[][type]" value="short-text">
                    <input type="hidden" name="blocks[][label]" value="Short Text Question">
                    <input type="hidden" name="blocks[][helpText]" value="Help text goes here.">
                    <span class="drag-handle"></span>
                    <label class="form-label">Short Text Question</label>
                    <input type="text" class="form-control" placeholder="Short answer text">
                    <small class="form-text text-muted">Help text goes here.</small>
                    <button type="button" class="btn btn-danger removeQuestionBtn" onclick="removeBlock(this)">Remove</button>
                </div>
            `;
            addBlock(html);
        }

        function addSingleChoiceQuestionBlock() {
            const existingIds = Array.from(document.querySelectorAll('.block')).map(b => b.dataset.id);
            const id = generateUniqueId('single-choice-question', existingIds);
            const html = `
                <div class="mb-3 question single-choice-question block" data-id="${id}" data-type="multipleChoice">
                    <input type="hidden" name="blocks[][id]" value="${id}">
                    <input type="hidden" name="blocks[][type]" value="single-choice">
                    <input type="hidden" name="blocks[][label]" value="Single Choice Question">
                    <input type="hidden" name="blocks[][helpText]" value="Help text goes here.">
                    <input type="hidden" name="blocks[][shuffle]" value="false">
                    <span class="drag-handle"></span>
                    <label class="form-label">Single Choice Question</label>
                    <div class="options-container">
                        <div class="form-check">
                            <input type="hidden" name="blocks[][options][0][text]" value="Option 1">
                            <input type="hidden" name="blocks[][options][0][pinned]" value="false" data-pinned="false">
                            <input class="form-check-input" type="radio" name="radio-${id}" id="radio-${id}-1">
                            <label class="form-check-label" for="radio-${id}-1">
                                Option 1
                            </label>
                        </div>
                    </div>
                    <small class="form-text text-muted">Help text goes here.</small>
                    <button type="button" class="btn btn-danger removeQuestionBtn" onclick="removeBlock(this)">Remove</button>
                </div>
            `;
            addBlock(html);
        }

        function addMultipleChoiceQuestionBlock() {
            const existingIds = Array.from(document.querySelectorAll('.block')).map(b => b.dataset.id);
            const id = generateUniqueId('multiple-choice-question', existingIds);
            const html = `
                <div class="mb-3 question multiple-choice-question block" data-id="${id}" data-type="checkbox">
                    <input type="hidden" name="blocks[][id]" value="${id}">
                    <input type="hidden" name="blocks[][type]" value="multiple-choice">
                    <input type="hidden" name="blocks[][label]" value="Multiple Choice Question">
                    <input type="hidden" name="blocks[][helpText]" value="Help text goes here.">
                    <input type="hidden" name="blocks[][shuffle]" value="false">
                    <span class="drag-handle"></span>
                    <label class="form-label">Multiple Choice Question</label>
                    <div class="options-container">
                        <div class="form-check">
                            <input type="hidden" name="blocks[][options][0][text]" value="Option 1">
                            <input type="hidden" name="blocks[][options][0][pinned]" value="false" data-pinned="false">
                            <input class="form-check-input" type="checkbox" id="checkbox-${id}-1">
                            <label class="form-check-label" for="checkbox-${id}-1">
                                Option 1
                            </label>
                        </div>
                    </div>
                    <small class="form-text text-muted">Help text goes here.</small>
                    <button type="button" class="btn btn-danger removeQuestionBtn" onclick="removeBlock(this)">Remove</button>
                </div>
            `;
            addBlock(html);
        }

        function addTextBlock() {
            const existingIds = Array.from(document.querySelectorAll('.block')).map(b => b.dataset.id);
            const id = generateUniqueId('text-block', existingIds);
            const newTextBlockHTML = `
                <div class="mb-3 text-block block" data-id="${id}" data-type="text-block">
                    <input type="hidden" name="blocks[][id]" value="${id}">
                    <input type="hidden" name="blocks[][type]" value="text-block">
                    <span class="drag-handle"></span>
                    <textarea class="form-control" name="blocks[][text]" rows="3" placeholder="Enter your text here..."></textarea>
                    <button type="button" class="btn btn-danger removeQuestionBtn" onclick="removeBlock(this)">Remove</button>
                </div>
            `;
            addBlock(newTextBlockHTML);
        }

        function addDividerBlock() {
            const existingIds = Array.from(document.querySelectorAll('.block')).map(b => b.dataset.id);
            const id = generateUniqueId('divider-block', existingIds);
            const newDividerBlockHTML = `
                <div class="mb-3 divider-block block" data-id="${id}">
                    <input type="hidden" name="blocks[][id]" value="${id}">
                    <input type="hidden" name="blocks[][type]" value="divider">
                    <span class="drag-handle"></span>
                    <hr>
                    <button type="button" class="btn btn-danger removeQuestionBtn" onclick="removeBlock(this)">Remove</button>
                </div>
            `;
            addBlock(newDividerBlockHTML);
        }

        function removeBlock(button) {
            history.addState(questionsContainer.innerHTML);
            const blockToRemove = button.parentElement;
            if (blockToRemove === selectedBlock) {
                inspector.style.display = 'none';
                selectedBlock = null;
            }
            blockToRemove.remove();
        }

        inspector.addEventListener('focusin', (e) => {
            if (e.target.matches('input, textarea')) {
                history.addState(questionsContainer.innerHTML);
            }
        });

        function undo() {
            const previousState = history.undo();
            if (previousState) {
                questionsContainer.innerHTML = previousState;
            }
        }

        function redo() {
            const nextState = history.redo();
            if (nextState) {
                questionsContainer.innerHTML = nextState;
            }
        }

        const validateBtn = document.getElementById('validateBtn');
        const publishBtn = document.getElementById('publishBtn');
        const errorContainer = document.getElementById('errorContainer');
        const errorList = document.getElementById('errorList');

        validateBtn.addEventListener('click', async () => {
            const surveyData = serializeForm();
            const response = await fetch('/api/surveys/validate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-csrf-token': '<%= csrfToken %>'
                },
                body: JSON.stringify(surveyData)
            });

            const result = await response.json();
            if (response.ok) {
                errorContainer.style.display = 'none';
                alert('Validation successful!');
            } else {
                displayErrors(result.errors);
            }
        });

        publishBtn.addEventListener('click', async () => {
            const surveyData = serializeForm();
            const response = await fetch('/api/surveys/validate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-csrf-token': '<%= csrfToken %>'
                },
                body: JSON.stringify(surveyData)
            });

            const result = await response.json();
            if (response.ok) {
                errorContainer.style.display = 'none';
                openPublishModal(surveyData);
            } else {
                displayErrors(result.errors);
            }
        });

        function displayErrors(errors) {
            errorContainer.style.display = 'block';
            errorList.innerHTML = '';
            errors.forEach(error => {
                const li = document.createElement('li');
                const path = error.path.join(' -> ');
                li.textContent = `${path}: ${error.message}`;
                li.style.cursor = 'pointer';
                li.addEventListener('click', () => {
                    jumpToError(error.path);
                });
                errorList.appendChild(li);
            });
        }

        function openPublishModal(surveyData) {
            const jsonSnapshot = document.getElementById('jsonSnapshot');
            jsonSnapshot.textContent = JSON.stringify(surveyData, null, 2);
            const publishModal = new bootstrap.Modal(document.getElementById('publishModal'));
            publishModal.show();
        }

        function jumpToError(path) {
            const questionIndex = path[3];
            const blockId = serializeForm().pages[0].blocks[0].questions[questionIndex].id;
            const blockEl = document.querySelector(`.block[data-id="${blockId}"]`);
            if (blockEl) {
                blockEl.scrollIntoView({ behavior: 'smooth', block: 'center' });
                blockEl.style.transition = 'background-color 0.5s';
                blockEl.style.backgroundColor = '#f8d7da';
                setTimeout(() => {
                    blockEl.style.backgroundColor = '';
                }, 2000);
            }
        }

        function serializeForm() {
            const title = document.getElementById('title').value;
            const questions = Array.from(questionsContainer.children).map(blockEl => {
                const question = {
                    id: blockEl.dataset.id,
                    type: blockEl.dataset.type,
                    text: blockEl.querySelector('.form-label')?.textContent.trim(),
                    helpText: blockEl.querySelector('.form-text')?.textContent.trim(),
                    required: blockEl.querySelector('input[name="blocks[][required]"]')?.value === 'true',
                };
                if (question.type === 'single-choice' || question.type === 'multiple-choice') {
                    question.shuffle = blockEl.querySelector('input[name="blocks[][shuffle]"]')?.value === 'true';
                    question.options = Array.from(blockEl.querySelectorAll('.options-container .form-check')).map(optionEl => ({
                        text: optionEl.querySelector('label').textContent.trim(),
                        pinned: optionEl.querySelector('input[type="hidden"]')?.dataset.pinned === 'true'
                    }));
                }
                return question;
            });

            // For simplicity, we'll put all blocks on a single page
            return {
                id: '<%= form._id %>',
                title,
                pages: [{
                    id: 'page-1',
                    title: 'Page 1',
                    blocks: [
                        {
                            id: 'block-1',
                            questions: questions
                        }
                    ]
                }]
            };
        }

        const downloadJsonBtn = document.getElementById('downloadJsonBtn');
        downloadJsonBtn.addEventListener('click', () => {
            const jsonSnapshot = document.getElementById('jsonSnapshot').textContent;
            const blob = new Blob([jsonSnapshot], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'survey.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });

        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                if (e.key === 'z') {
                    e.preventDefault();
                    undo();
                } else if (e.key === 'y') {
                    e.preventDefault();
                    redo();
                }
            }
        });
    </script>
</body>
</html>